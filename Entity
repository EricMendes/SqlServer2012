using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary
{
    public class Client
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Gender Gender { get; set; }
        public DateTime BirthDate { get; set; }
    }

    public enum Gender
    {
        Male = 1,
        Female = 2
    }
}

using System;
using System.Collections.Generic;
using System.Linq;

namespace ClassLibrary
{
    public interface ITask
    {
        string Execute(string payload);
    }

    public interface IPropertyCustomizable
    {
        IEnumerable<TaskProperty> GetCustomProperties();
        void SetCustomProperty(string propertyName, string propertyValue);
    }

    public interface IValidated
    {
        IEnumerable<string> ValidationErrors { get; }
        bool IsValid();
    }

    public abstract class Task : ITask
    {
        public int Id { get; protected set; }
        public string Name { get; protected set; }
        public string Description { get; protected set; }
        public TaskType Type { get; protected set; }
        public TaskStatus Status { get; protected set; }
        public string In { get; private set; }
        public string Out { get; private set; }
        public string Execute(string payload)
        {
            var retorno = string.Empty;
            Status = TaskStatus.Started;
            In = payload;
            OnExecuteStart?.Invoke(this, EventArgs.Empty);
            retorno = ExecuteTask(payload);
            Out = retorno;
            OnExecuteFinish?.Invoke(this, EventArgs.Empty);
            Status = TaskStatus.Success;
            return retorno;
        }

        public event ExecuteStartEventHandler OnExecuteStart;
        public event ExecuteFinishEventHandler OnExecuteFinish;
        
        protected abstract string ExecuteTask(string payload);
    }

    public class TaskExecutionEventArgs: EventArgs
    {
        public TaskStatus Status { get; set; }
    }

    public delegate void ExecuteStartEventHandler(object sender, EventArgs e);
    public delegate void ExecuteFinishEventHandler(object sender, EventArgs e);

    public enum TaskStatus
    {
        Started = 1,
        Success = 2,
        Failed = 3
    }

    public class MandatoryFieldMissingException: ApplicationException
    {
        public MandatoryFieldMissingException(string message): base(message)
        {

        }
    }

}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary
{
    public class Page<T>: List<T>
    {
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
        public int RegistersPerPage { get; set; }
        public int TotalRegisters { get; set; }
    }

    public interface IRepositoryBase<T> where T : class
    {
        void Save(T entity);
        T GetById(int id);
        IEnumerable<T> GetAll();
        IEnumerable<T> GetAll(Func<T, bool> filters);

    }

    public interface IPagedRepositoryBase<T>: IRepositoryBase<T> where T : class 
    {
        Page<T> GetPage(Func<T, bool> filters, int pageNumber, int recordsPerPage, Func<IEnumerable<T>, IEnumerable<T>> order);
    }

    public class RepositoryBase<T> : IRepositoryBase<T> where T : class
    {
        public IEnumerable<T> GetAll()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<T> GetAll(Func<T, bool> filters)
        {
            throw new NotImplementedException();
        }

        public T GetById(int id)
        {
            throw new NotImplementedException();
        }

        public void Save(T entity)
        {
            throw new NotImplementedException();
        }
    }


    public class PagedRepositoryBase<T> : RepositoryBase<T>, IPagedRepositoryBase<T> where T : class
    {
        public Page<T> GetPage(Func<T, bool> filters, int pageNumber, int recordsPerPage, Func<IEnumerable<T>, IEnumerable<T>> order)
        {
            var entities = ClientList.GetClientList()  as IEnumerable<T>;//Substituir pela consulta no EF

            var skip = (pageNumber - 1) * recordsPerPage;
            var totalCount = entities.Count();
            double totalPages = Math.Ceiling(totalCount / (double)recordsPerPage);
            entities = entities.Where(filters);
            if (order != null)
            {
                entities = order(entities);
            }
            entities = entities.Skip(skip).Take(recordsPerPage);

            Page<T> pagedEntity = new Page<T>();
            pagedEntity.AddRange(entities);
            pagedEntity.TotalPages = Convert.ToInt32(totalPages);
            pagedEntity.TotalRegisters = totalCount;
            pagedEntity.CurrentPage = pageNumber;
            pagedEntity.RegistersPerPage = recordsPerPage;

            return pagedEntity;
        }
    }

    public static class ClientList 
    {
        public static List<Client> GetClientList()
        {
            var clientlist = new List<Client>();

            clientlist.Add(new Client()
            {
                Id = 1,
                Name = "Eric Mendes de Souza",
                Gender = Gender.Male,
                BirthDate = new DateTime(1981, 2, 9)
            });
            clientlist.Add(new Client()
            {
                Id = 2,
                Name = "Lilian Castro Kelian",
                Gender = Gender.Female,
                BirthDate = new DateTime(1986, 4, 24)
            });
            clientlist.Add(new Client()
            {
                Id = 3,
                Name = "Maria Luiza Carvalho Mendes",
                Gender = Gender.Female,
                BirthDate = new DateTime(2012, 1, 4)
            });
            clientlist.Add(new Client()
            {
                Id = 4,
                Name = "Cauã Kelian Kulaif",
                Gender = Gender.Male,
                BirthDate = new DateTime(2004, 10, 31)
            });
            clientlist.Add(new Client()
            {
                Id = 5,
                Name = "André Kelian Kulaif",
                Gender = Gender.Male,
                BirthDate = new DateTime(2007, 5, 15)
            });

            return clientlist;
        }
    }

    public class ClientRepository : PagedRepositoryBase<Client>
    {
        
    }
}



using System;

namespace ClassLibrary
{
    public class TaskProperty
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsMandatory { get; set; }
    }

    public enum PropertyType
    {
        String = 1,
        Int = 2,
        Double = 3,
        Boolean = 4
    }

    public class PropertyConverter
    {

    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary
{
    public class TaskType
    {
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary
{
    public class TxtSourceTask : Task, IPropertyCustomizable, IValidated
    {
        public char? Separator { get; private set; }
        private bool HasHeader { get; set; }
        public List<TaskProperty> CustomProperties { get; set; }
        public IEnumerable<string> ValidationErrors { get { return validationErrors; } }
        private List<string> validationErrors { get; set; }
        public TxtSourceTask()
        {
            validationErrors = new List<string>();
            CustomProperties = new List<TaskProperty>();
            InitializeCustomProperties();
        }

        private void InitializeCustomProperties()
        {
            var separator = new TaskProperty()
            {
                Name = "Separator",
                IsMandatory = true,
                Type = "char"
            };
            CustomProperties.Add(separator);

            var hasValue = new TaskProperty()
            {
                Name = "HasValue",
                IsMandatory = false,
                Type = "bool"
            };
            CustomProperties.Add(hasValue);
        }

        public bool IsValid()
        {
            validationErrors.Clear();
            bool isValid = false;
            if (Separator == null)
            {
                validationErrors.Add("Separator não está definido.");
            }
            else
            {
                isValid = true;
            }
            return isValid;
        }

        protected override string ExecuteTask(string payload)
        {
            if (IsValid())
            {
                return payload.Replace(Separator.Value, ';');
            }
            else
            {
                throw new MandatoryFieldMissingException("Uma ou mais propriedades obrigatórias não foram preenchidas. Analise a propriedade ValidationErrors para mais detalhes.");
            }
        }

        public IEnumerable<TaskProperty> GetCustomProperties()
        {
            return CustomProperties;
        }

        public void SetCustomProperty(string propertyName, string propertyValue)
        {
            switch (propertyName.ToLower())
            {
                case "separator":
                    char separator;
                    Char.TryParse(propertyValue, out separator);
                    Separator = separator;
                    break;
                case "hasheader":
                    bool hasheader;
                    bool.TryParse(propertyValue, out hasheader);
                    HasHeader = hasheader;
                    break;
                default:
                    throw new Exception("Propriedade não encontrada.");
            }
        }
    }
}
using ClassLibrary;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication
{
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch sw = new Stopwatch();
            sw.Start();
            TxtSourceTask txtSourceTask = new TxtSourceTask();
            var properties = txtSourceTask.GetCustomProperties();
            foreach (var item in properties)
            {
                Console.WriteLine("Name:{0}, Type:{1}, IsMandatory:{2}.", item.Name, item.Type, item.IsMandatory);
            }

            string valueToConvert = "Eric,M,36";
            txtSourceTask.SetCustomProperty("separator", ",");
            string retorno = txtSourceTask.Execute(valueToConvert);
            sw.Stop();

            Console.WriteLine(sw.Elapsed);
            Console.WriteLine(retorno);

            //ClientRepository repository = new ClientRepository();
            //var clients = repository.GetPage(c => c.Id < 10, 1, 5, x => x.OrderBy(c => c.Gender).ThenBy(c => c.BirthDate));
            //foreach (var item in clients)
            //{
            //    Console.WriteLine("Cliente {0}, Nome: {1}, Sexo: {2}, Nascimento: {3}.", item.Id, item.Name, item.Gender, item.BirthDate);
            //}
            //Console.WriteLine("Página {0} de {1}. Mostrando {2} registros de um total de {3}", clients.CurrentPage, clients.TotalPages, clients.RegistersPerPage, clients.TotalRegisters);

            Console.ReadKey();
        }
    }
}

<items termsofuse="https://boardgamegeek.com/xmlapi/termsofuse">
<item type="boardgame" id="40354">
<thumbnail>
https://cf.geekdo-images.com/thumb/img/MCkhWuIeEsomHYFow7N_XXgIpRo=/fit-in/200x150/pic524669.jpg
</thumbnail>
<image>
https://cf.geekdo-images.com/original/img/soIvjpEE-OTHe3OuFL7LEjxgLH4=/0x0/pic524669.jpg
</image>
<name type="primary" sortindex="1" value="Maria"/>
<description>
MARIA is a game based on the War of the Austrian Succession, where Austria was attacked by Prussia, France, Bavaria and Saxony, while only Great Britain, Hanover and the Netherlands (by forming the so-called Pragmatic Army) helped her.&#10;&#10;MARIA is primarily a 3 player game. One player is Austria, the second is France plus Bavaria, while the third player plays as Prussia (Austria's enemy) and the Pragmatic Army (Austria's ally) at the same time. This is made possible by the division of the map into two parts, the Flanders map and the Bohemia map.&#10;&#10;MARIA is derived from the award-winning Friedrich, but has its very own character, including politics, hussars, force marches, imperial election, Saxony's betrayal and Prussia's annexation of Silesia. Subtle maneuvers, seizure of fortresses, prudent retreats, and Machiavellian politics are the keys to victory. However, players must be careful: whoever uses his Tactical Cards unwisely in battle can suddenly find himself not on the highway to glory but on the road to ruin.&#10;&#10;MARIA takes you to the era of the 18th century's ruthless struggle for power. It can be played in 2 variants: the shorter, simplified introductory game or the longer but richer advanced game, with its simultaneous campaigns in Bohemia and Flanders.&#10;&#10;
</description>
<yearpublished value="2009"/>
<minplayers value="2"/>
<maxplayers value="3"/>
<poll name="suggested_numplayers" title="User Suggested Number of Players" totalvotes="89">
<results numplayers="1">
<result value="Best" numvotes="0"/>
<result value="Recommended" numvotes="2"/>
<result value="Not Recommended" numvotes="53"/>
</results>
<results numplayers="2">
<result value="Best" numvotes="3"/>
<result value="Recommended" numvotes="32"/>
<result value="Not Recommended" numvotes="30"/>
</results>
<results numplayers="3">
<result value="Best" numvotes="84"/>
<result value="Recommended" numvotes="2"/>
<result value="Not Recommended" numvotes="1"/>
</results>
<results numplayers="3+">
<result value="Best" numvotes="1"/>
<result value="Recommended" numvotes="2"/>
<result value="Not Recommended" numvotes="43"/>
</results>
</poll>
<playingtime value="210"/>
<minplaytime value="210"/>
<maxplaytime value="210"/>
<minage value="14"/>
<poll name="suggested_playerage" title="User Suggested Player Age" totalvotes="23">
<results>
<result value="2" numvotes="0"/>
<result value="3" numvotes="0"/>
<result value="4" numvotes="0"/>
<result value="5" numvotes="0"/>
<result value="6" numvotes="0"/>
<result value="8" numvotes="1"/>
<result value="10" numvotes="1"/>
<result value="12" numvotes="8"/>
<result value="14" numvotes="11"/>
<result value="16" numvotes="2"/>
<result value="18" numvotes="0"/>
<result value="21 and up" numvotes="0"/>
</results>
</poll>
<poll name="language_dependence" title="Language Dependence" totalvotes="29">
<results>
<result level="1" value="No necessary in-game text" numvotes="7"/>
<result level="2" value="Some necessary text - easily memorized or small crib sheet" numvotes="21"/>
<result level="3" value="Moderate in-game text - needs crib sheet or paste ups" numvotes="1"/>
<result level="4" value="Extensive use of text - massive conversion needed to be playable" numvotes="0"/>
<result level="5" value="Unplayable in another language" numvotes="0"/>
</results>
</poll>
<link type="boardgamecategory" id="2726" value="Age of Reason"/>
<link type="boardgamecategory" id="1023" value="Bluffing"/>
<link type="boardgamecategory" id="1026" value="Negotiation"/>
<link type="boardgamecategory" id="1001" value="Political"/>
<link type="boardgamecategory" id="1019" value="Wargame"/>
<link type="boardgamemechanic" id="2040" value="Hand Management"/>
<link type="boardgamemechanic" id="2078" value="Point to Point Movement"/>
<link type="boardgamemechanic" id="2016" value="Secret Unit Deployment"/>
<link type="boardgamemechanic" id="2070" value="Simulation"/>
<link type="boardgamefamily" id="9793" value="Age of Kings"/>
<link type="boardgameexpansion" id="86431" value="Maria: Silesia Gambit"/>
<link type="boardgamedesigner" id="4034" value="Richard Sivél"/>
<link type="boardgameartist" id="20523" value="Hans Baltzer"/>
<link type="boardgameartist" id="51410" value="Richard Shako"/>
<link type="boardgameartist" id="20525" value="Richard Stubenvoll"/>
<link type="boardgameartist" id="12381" value="Andreas Töpfer"/>
<link type="boardgamepublisher" id="1629" value="Histogame"/>
</item>
</items>
